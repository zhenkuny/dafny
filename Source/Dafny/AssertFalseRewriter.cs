using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Boogie;
using System.Diagnostics.Contracts;
namespace Microsoft.Dafny.AssertFalse {
  static class Util {

    internal static IEnumerable<(TopLevelDecl, Method)> AllMethodMembers(ModuleDefinition module)
    {
        foreach (var decl in module.TopLevelDecls)
        {
            var topLevelDecl = (decl as TopLevelDeclWithMembers);
            if (topLevelDecl != null)
            {
                foreach (var m in topLevelDecl.Members.Where((member) => member is Method))
                {
                    var method = (Method)m;
                    yield return (topLevelDecl, method);
                }
            }
        }
    }

}

public class AssertFalseRewriter : IRewriter
{
    public AssertFalseRewriter(ErrorReporter reporter) : base(reporter)
    {
    }

    void PreRewriteMethod(Method m, TopLevelDecl enclosingDecl)
    {
        Contract.Requires(m != null);

            if (!(m.tok is IncludeToken))
            {
                var body = m.Body?.Body;
                if (body != null)
                {
                    Console.Error.WriteLine("Asserting false at the end of " + m.Name);
                    var mTok = new AutoGeneratedToken(m.tok);
                    Attributes attrs = new Attributes("auto_generated", new List<Expression>(), null);
                    body.Add(new AssertStmt(mTok, mTok, new LiteralExpr(mTok, false), null, null, attrs));
                }
            }
    }

    internal override void PreResolve(ModuleDefinition module)
    {
        foreach (var (tld, method) in Util.AllMethodMembers(module))
        {
            PreRewriteMethod(method, tld);
        }
    }
}
}
